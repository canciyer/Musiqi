# Daisyxmusic (Telegram bot project)

# Copyright (C) 2021  Inukaasith
# Copyright (C) 2021  Technical-Hunter
# Copyright (C) 2021  ImJanindu
# Copyright (C) 2021  Anjana-MA
# Copyright (C) 2021  Bemro-Official

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


import json
import os
from os import path
from typing import Callable

import aiofiles
import aiohttp
import ffmpeg
import requests
import wget
from PIL import Image, ImageDraw, ImageFont
from pyrogram import Client, filters
from pyrogram.errors import UserAlreadyParticipant
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, Voice
from Python_ARQ import ARQ
from youtube_search import YoutubeSearch

from DaisyXMusic.config import BOT_NAME as bn
from DaisyXMusic.config import UPDATES_CHANNEL as updateschannel
from DaisyXMusic.config import ARQ_API_KEY, DURATION_LIMIT, que
from DaisyXMusic.function.admins import admins as a
from DaisyXMusic.helpers.admins import get_administrators
from DaisyXMusic.helpers.channelmusic import get_chat_id
from DaisyXMusic.helpers.errors import DurationLimitError
from DaisyXMusic.helpers.decorators import errors, authorized_users_only 
from DaisyXMusic.helpers.filters import command, other_filters
from DaisyXMusic.helpers.gets import get_file_name
from DaisyXMusic.services.callsmusic import callsmusic
from DaisyXMusic.services.callsmusic.callsmusic import client as USER
from DaisyXMusic.services.converter.converter import convert
from DaisyXMusic.services.downloaders import youtube
from DaisyXMusic.services.queues import queues

aiohttpsession = aiohttp.ClientSession()
chat_id = None

# Credits to github.com/thehamkercat for api
arq = ARQ("https://thearq.tech", ARQ_API_KEY, aiohttpsession)

DISABLED_GROUPS = []
useer ="NaN"
def cb_admin_check(func: Callable) -> Callable:
    async def decorator(client, cb):
        admemes = a.get(cb.message.chat.id)
        if cb.from_user.id in admemes:
            return await func(client, cb)
        else:
            await cb.answer("Siz…ô icaz…ô verilmir!", show_alert=True)
            return

    return decorator


def transcode(filename):
    ffmpeg.input(filename).output(
        "input.raw", 
        format="s16le", 
        acodec="pcm_s16le", 
        ac=2, 
        ar="48k"
    ).overwrite_output().run()
    os.remove(filename)


# Convert seconds to mm:ss
def convert_seconds(seconds):
    seconds = seconds % (24 * 3600)
    seconds %= 3600
    minutes = seconds // 60
    seconds %= 60
    return "%02d:%02d" % (minutes, seconds)


# Convert hh:mm:ss to seconds
def time_to_seconds(time):
    stringt = str(time)
    return sum(int(x) * 60 ** i for i, x in enumerate(reversed(stringt.split(":"))))


# Change image size
def changeImageSize(maxWidth, maxHeight, image):
    widthRatio = maxWidth / image.size[0]
    heightRatio = maxHeight / image.size[1]
    newWidth = int(widthRatio * image.size[0])
    newHeight = int(heightRatio * image.size[1])
    newImage = image.resize((newWidth, newHeight))
    return newImage


async def generate_cover(requested_by, title, views, duration, thumbnail):
    async with aiohttp.ClientSession() as session:
        async with session.get(thumbnail) as resp:
            if resp.status == 200:
                f = await aiofiles.open("background.png", mode="wb")
                await f.write(await resp.read())
                await f.close()

    image1 = Image.open("./background.png")
    image2 = Image.open("./etc/foreground.png")
    image3 = changeImageSize(1280, 720, image1)
    image4 = changeImageSize(1280, 720, image2)
    image5 = image3.convert("RGBA")
    image6 = image4.convert("RGBA")
    Image.alpha_composite(image5, image6).save("temp.png")
    img = Image.open("temp.png")
    draw = ImageDraw.Draw(img)
    font = ImageFont.truetype("etc/font.ttf", 32)
    draw.text((205, 550), f"Title: {title}", (51, 215, 255), font=font)
    draw.text((205, 590), f"Duration: {duration}", (255, 255, 255), font=font)
    draw.text((205, 630), f"Views: {views}", (255, 255, 255), font=font)
    draw.text(
        (205, 670),
        f"∆èlav…ô etdi: {requested_by}",
        (255, 255, 255),
        font=font,
    )
    img.save("final.png")
    os.remove("temp.png")
    os.remove("background.png")


@Client.on_message(filters.command("playlist") & filters.group & ~filters.edited)
async def playlist(client, message):
    global que
    if message.chat.id in DISABLED_GROUPS:
        return    
    queue = que.get(message.chat.id)
    if not queue:
        await message.reply_text("Pleylist bo≈üdur")
    temp = []
    for t in queue:
        temp.append(t)
    now_playing = temp[0][0]
    by = temp[0][1].mention(style="md")
    msg = "**Hazƒ±rda S…ôsl…ôn…ôn** in {}".format(message.chat.title)
    msg += "\n- " + now_playing
    msg += "\n- by " + by
    temp.pop(0)
    if temp:
        msg += "\n\n"
        msg += "**N√∂vb…ô**"
        for song in temp:
            name = song[0]
            usr = song[1].mention(style="md")
            msg += f"\n- {name}"
            msg += f"\n-  by {usr}\n"
    await message.reply_text(msg)


def updated_stats(chat, queue, vol=100):
    if chat.id in callsmusic.pytgcalls.active_calls:
        # if chat.id in active_chats:
        stats = "**{}** Ayarlarƒ±".format(chat.title)
        if len(que) > 0:
            stats += "\n\n"
            stats += "Musiqi S…ôsi : {}%\n".format(vol)
            stats += "N√∂vb…ôti Mahnƒ± : `{}`\n".format(len(que))
            stats += "Hazƒ±rda S…ôsl…ôn…ôn : **{}**\n".format(queue[0][0])
            stats += "T…ôl…ôb Ed…ôn : {}".format(queue[0][1].mention)
    else:
        stats = None
    return stats


def r_ply(type_):
    if type_ == "play":
        pass
    else:
        pass
    mar = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("‚èπ", "leave"),
                InlineKeyboardButton("‚è∏", "puse"),
                InlineKeyboardButton("‚ñ∂Ô∏è", "resume"),
                InlineKeyboardButton("‚è≠", "skip"),
            ],
            [
                InlineKeyboardButton("Pleylist üìñ", "playlist"),
            ],
            [
                InlineKeyboardButton("‚ùå Baƒüla", "cls")
            ],
        ]
    )
    return mar


@Client.on_message(filters.command("current") & filters.group & ~filters.edited)
async def ee(client, message):
    if message.chat.id in DISABLED_GROUPS:
        return
    queue = que.get(message.chat.id)
    stats = updated_stats(message.chat, queue)
    if stats:
        await message.reply(stats)
    else:
        await message.reply("Hazƒ±rda musiqi s…ôsl…ôndirilmir")


@Client.on_message(filters.command("player") & filters.group & ~filters.edited)
@authorized_users_only
async def settings(client, message):
    if message.chat.id in DISABLED_GROUPS:
        await message.reply("Musiqi oxuducu deaktivdir")
        return    
    playing = None
    chat_id = get_chat_id(message.chat)
    if chat_id in callsmusic.pytgcalls.active_calls:
        playing = True
    queue = que.get(chat_id)
    stats = updated_stats(message.chat, queue)
    if stats:
        if playing:
            await message.reply(stats, reply_markup=r_ply("pause"))

        else:
            await message.reply(stats, reply_markup=r_ply("play"))
    else:
        await message.reply("Hazƒ±rda musiqi s…ôsl…ôndirilmir")


@Client.on_message(
    filters.command("musicplayer") & ~filters.edited & ~filters.bot & ~filters.private
)
@authorized_users_only
async def hfmm(_, message):
    global DISABLED_GROUPS
    try:
        user_id = message.from_user.id
    except:
        return
    if len(message.command) != 2:
        await message.reply_text(
            "M…ôn yalnƒ±z `/musicplayer on` v…ô `/musicplayer off` icra edir…ôm"
        )
        return
    status = message.text.split(None, 1)[1]
    message.chat.id
    if status == "ON" or status == "on" or status == "On":
        lel = await message.reply("`Hazƒ±rlanƒ±r...`")
        if not message.chat.id in DISABLED_GROUPS:
            await lel.edit("Bu √áatda Musiqi Pleyeri Artƒ±q Aktivl…ô≈üdirilib")
            return
        DISABLED_GROUPS.remove(message.chat.id)
        await lel.edit(
            f"Qrup ƒ∞stifad…ô√ßil…ôri √º√ß√ºn Musiqi Pleyeri Uƒüurla Aktiv Edildi {message.chat.id}"
        )

    elif status == "OFF" or status == "off" or status == "Off":
        lel = await message.reply("`Processing...`")
        
        if message.chat.id in DISABLED_GROUPS:
            await lel.edit("Bu √áatda Musiqi Pleyeri artƒ±q s√∂nd√ºr√ºlm√º≈üd√ºr")
            return
        DISABLED_GROUPS.append(message.chat.id)
        await lel.edit(
            f"S√∂hbet ƒ∞stifad…ô√ßil…ôri √º√ß√ºn Musiqi Pleyeri Uƒüurla Deaktiv edildi {message.chat.id}"
        )
    else:
        await message.reply_text(
            "M…ôn yalnƒ±z `/musicplayer on` v…ô `/musicplayer off` icra edir…ôm`"
        )    
        

@Client.on_callback_query(filters.regex(pattern=r"^(playlist)$"))
async def p_cb(b, cb):
    global que
    que.get(cb.message.chat.id)
    type_ = cb.matches[0].group(1)
    cb.message.chat.id
    cb.message.chat
    cb.message.reply_markup.inline_keyboard[1][0].callback_data
    if type_ == "playlist":
        queue = que.get(cb.message.chat.id)
        if not queue:
            await cb.message.edit("Pleylist bo≈üdur")
        temp = []
        for t in queue:
            temp.append(t)
        now_playing = temp[0][0]
        by = temp[0][1].mention(style="md")
        msg = "**Hazƒ±rda S…ôsl…ôn…ôn** {}".format(cb.message.chat.title)
        msg += "\n- " + now_playing
        msg += "\n-  by " + by
        temp.pop(0)
        if temp:
            msg += "\n\n"
            msg += "**N√∂vb…ôti**"
            for song in temp:
                name = song[0]
                usr = song[1].mention(style="md")
                msg += f"\n- {name}"
                msg += f"\n- by {usr}\n"
        await cb.message.edit(msg)


@Client.on_callback_query(
    filters.regex(pattern=r"^(play|pause|skip|leave|puse|resume|menu|cls)$")
)
@cb_admin_check
async def m_cb(b, cb):
    global que
    if (
        cb.message.chat.title.startswith("Channel Music: ")
        and chat.title[14:].isnumeric()
    ):
        chet_id = int(chat.title[13:])
    else:
        chet_id = cb.message.chat.id
    qeue = que.get(chet_id)
    type_ = cb.matches[0].group(1)
    cb.message.chat.id
    m_chat = cb.message.chat

    the_data = cb.message.reply_markup.inline_keyboard[1][0].callback_data
    if type_ == "pause":
        if chet_id in callsmusic.pytgcalls.active_calls:
            await cb.answer("S…ôs…ô qo≈üula bilm…ôdi!", show_alert=True)
        else:
            await callsmusic.pytgcalls.pause_stream(chet_id)
            await cb.answer("Musiqiy…ô Fasil…ô Verildi!")
            await cb.message.edit(
                updated_stats(m_chat, qeue), reply_markup=r_ply("play")
            )

    elif type_ == "play":
        if chet_id in callsmusic.pytgcalls.active_calls:
            await cb.answer("S…ôs…ô qo≈üula bilm…ôdi!", show_alert=True)
        else:
            await callsmusic.pytgcalls.resume_stream(chet_id)
            await cb.answer("Musiqi Davam Etdirildi!")
            await cb.message.edit(
                updated_stats(m_chat, qeue), reply_markup=r_ply("pause")
            )

    elif type_ == "playlist":
        queue = que.get(cb.message.chat.id)
        if not queue:
            await cb.message.edit("Pleylist bo≈üdur")
        temp = []
        for t in queue:
            temp.append(t)
        now_playing = temp[0][0]
        by = temp[0][1].mention(style="md")
        msg = "**Hazƒ±rda S…ôsl…ôndirilir ** in {}".format(cb.message.chat.title)
        msg += "\n- " + now_playing
        msg += "\n- Req by " + by
        temp.pop(0)
        if temp:
            msg += "\n\n"
            msg += "**N√∂vb…ôti **"
            for song in temp:
                name = song[0]
                usr = song[1].mention(style="md")
                msg += f"\n- {name}"
                msg += f"\n-  by {usr}\n"
        await cb.message.edit(msg)

    elif type_ == "resume":
        if chet_id in callsmusic.pytgcalls.active_calls:
            await cb.answer("S…ôs a√ßƒ±q deyil v…ô ya artƒ±q dayandƒ±rƒ±lƒ±b", show_alert=True)
        else:
            await callsmusic.pytgcalls.resume_stream(chet_id)
            await cb.answer("Musiqi Davam Etdirildi!")
    elif type_ == "puse":
        if chet_id in callsmusic.pytgcalls.active_calls:
            await cb.answer("S…ôs a√ßƒ±q deyil v…ô ya artƒ±q dayandƒ±rƒ±lƒ±b", show_alert=True)
        else:
            await callsmusic.pytgcalls.pause_stream(chet_id)
            await cb.answer("Musiqiy…ô Fasil…ô Verildi !")
    elif type_ == "cls":
        await cb.answer("Menu Baƒülandƒ±")
        await cb.message.delete()

    elif type_ == "menu":
        stats = updated_stats(cb.message.chat, qeue)
        await cb.answer("Menu A√ßƒ±ldƒ±")
        marr = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("‚èπ", "leave"),
                    InlineKeyboardButton("‚è∏", "puse"),
                    InlineKeyboardButton("‚ñ∂Ô∏è", "resume"),
                    InlineKeyboardButton("‚è≠", "skip"),
                ],
                [
                    InlineKeyboardButton("Pleylist üìñ", "playlist"),
                ],
                [
                    InlineKeyboardButton("‚ùå Baƒüla", "cls")
                ],
            ]
        )
        await cb.message.edit(stats, reply_markup=marr)
    elif type_ == "skip":
        if qeue:
            qeue.pop(0)
        if chet_id in callsmusic.pytgcalls.active_calls:
            await cb.answer("S…ôs…ô qo≈üula bilm…ôdi!", show_alert=True)
        else:
            queues.task_done(chet_id)

            if queues.is_empty(chet_id):
                await callsmusic.pytgcalls.leave_group_call(chet_id)
                await cb.message.edit("- Ba≈üqa Musiqi Pleylist yoxdur..\n- S…ôsli s√∂hb…ôtd…ôn ayrƒ±ldƒ±m!")
            else:
                await callsmusic.pytgcalls.change_stream(
                    chet_id, queues.get(chet_id)["file"]
                )
                await cb.answer("Ke√ßildi")
                await cb.message.edit((m_chat, qeue), reply_markup=r_ply(the_data))
                await cb.message.reply_text(
                    f"- Ke√ßil…ôn Musiqi\n- S…ôsl…ôndirilir **{qeue[0][0]}**"
                )

    else:
        if chet_id in callsmusic.pytgcalls.active_calls:
            try:
                queues.clear(chet_id)
            except QueueEmpty:
                pass

            await callsmusic.pytgcalls.leave_group_call(chet_id)
            await cb.message.edit("S√∂hb…ôtd…ôn Uƒüurla Ayrƒ±ldƒ±!")
        else:
            await cb.answer("S…ôs…ô qo≈üula bilm…ôdi!", show_alert=True)


@Client.on_message(command("play") & other_filters)
@authorized_users_only
async def play(_, message: Message):
    global que
    global useer
    if message.chat.id in DISABLED_GROUPS:
        return    
    lel = await message.reply("üîÑ **Hazƒ±rlanƒ±r**")
    administrators = await get_administrators(message.chat)
    chid = message.chat.id

    try:
        user = await USER.get_me()
    except:
        user.first_name = "GroupMuzikBot"
    usar = user
    wew = usar.id
    try:
        # chatdetails = await USER.get_chat(chid)
        await _.get_chat_member(chid, wew)
    except:
        for administrator in administrators:
            if administrator == message.from_user.id:
                if message.chat.title.startswith("Channel Music: "):
                    await lel.edit(
                        "<b>Kanalƒ±nƒ±za assistanƒ± …ôlav…ô etm…ôyi unutmayƒ±n</b>",
                    )
                    pass
                try:
                    invitelink = await _.export_chat_invite_link(chid)
                except:
                    await lel.edit(
                        "<b>∆èvv…ôlc…ô m…ôni qrupunuza admin olaraq …ôlav…ô edin</b>",
                    )
                    return

                try:
                    await USER.join_chat(invitelink)
                    await USER.send_message(
                        message.chat.id, "S…ôsli s√∂hb…ôtd…ô musiqi s…ôsl…ôndirm…ôk √º√ß√ºn bu qrupa qo≈üuldum üéµ"
                    )
                    await lel.edit(
                        "<b>Asistan s√∂hb…ôtiniz…ô qo≈üuldu üì£</b>",
                    )

                except UserAlreadyParticipant:
                    pass
                except Exception:
                    # print(e)
                    await lel.edit(
                        f"<b>‚õîÔ∏è Flood X…ôtasƒ± ‚õîÔ∏è \n{user.first_name} √ßox saylƒ± ist…ôkl…ôr √ºz…ôrin…ô qrupunuza qo≈üula bilm…ôdi. Asistan {user.first_name} qrupda qadaƒüan edilm…ôdiyin…ô …ômin olun. "
                        "\n\nV…ô ya …ôl il…ô qrupunuza Asistan …ôlav…ô edin v…ô yenid…ôn c…ôhd edin</b>",
                    )
    try:
        await USER.get_chat(chid)
        # lmoa = await client.get_chat_member(chid,wew)
    except:
        await lel.edit(
            f"<i> {user.first_name} Bu grupda yoxdu!\nAdmin hey…ôtind…ôn 1 n…ôf…ôr mahnƒ± qo≈ümazdan …ôvv…ôl /play …ômrini bo≈ü olaraq istifad…ô edin\n{user.first_name} Bu halda da grupa qatƒ±lmazsa Onu …ôl il…ô …ôlav…ô edin v…ô ya d…ôst…ôk grupuna bildirin</i>\nD…ôst…ôk grupu: @GroupMuzikSup</i>"
        )
        return
    text_links=None
    await lel.edit("üîé **Axtarƒ±ram**")
    if message.reply_to_message:
        entities = []
        toxt = message.reply_to_message.text or message.reply_to_message.caption
        if message.reply_to_message.entities:
            entities = message.reply_to_message.entities + entities
        elif message.reply_to_message.caption_entities:
            entities = message.reply_to_message.entities + entities
        urls = [entity for entity in entities if entity.type == 'url']
        text_links = [
            entity for entity in entities if entity.type == 'text_link'
        ]
    else:
        urls=None
    if text_links:
        urls = True
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    rpk = "[" + user_name + "](tg://user?id=" + str(user_id) + ")"
    audio = (
        (message.reply_to_message.audio or message.reply_to_message.voice)
        if message.reply_to_message
        else None
    )
    if audio:
        if round(audio.duration / 60) > DURATION_LIMIT:
            raise DurationLimitError(
                f"‚ùå {DURATION_LIMIT} d…ôqiq…ôd…ôn √ßox olan videolarƒ±n oynatƒ±lmasƒ±na icaz…ô verilmir!"
            )
        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("üìñ Pleylist", callback_data="playlist"),
                    InlineKeyboardButton("Menu ‚èØ ", callback_data="menu"),
                ],
                [
                    InlineKeyboardButton(text="‚ùå Baƒüla", callback_data="cls")
                ],
            ]
        )
        file_name = get_file_name(audio)
        title = file_name
        thumb_name = "https://telegra.ph/file/f6086f8909fbfeb0844f2.png"
        thumbnail = thumb_name
        duration = round(audio.duration / 60)
        views = "∆èlav…ô edildi"
        requested_by = message.from_user.first_name
        await generate_cover(requested_by, title, views, duration, thumbnail)
        file_path = await convert(
            (await message.reply_to_message.download(file_name))
            if not path.isfile(path.join("downloads", file_name))
            else file_name
        )
    elif urls:
        query = toxt
        await lel.edit("üéµ **ƒ∞≈ül…ônilir**")
        ydl_opts = {"format": "bestaudio/best"}
        try:
            results = YoutubeSearch(query, max_results=1).to_dict()
            url = f"https://youtube.com{results[0]['url_suffix']}"
            # print(results)
            title = results[0]["title"][:40]
            thumbnail = results[0]["thumbnails"][0]
            thumb_name = f"thumb{title}.jpg"
            thumb = requests.get(thumbnail, allow_redirects=True)
            open(thumb_name, "wb").write(thumb.content)
            duration = results[0]["duration"]
            results[0]["url_suffix"]
            views = results[0]["views"]

        except Exception as e:
            await lel.edit(
                "Mahnƒ± tapƒ±lmadƒ±. Ba≈üqa bir mahnƒ±nƒ± sƒ±nayƒ±n v…ô ya mahnƒ± adƒ±nƒ± d√ºzg√ºn yazƒ±n."
            )
            print(str(e))
            return
        dlurl=url
        dlurl=dlurl.replace("youtube","youtubepp")
        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("üìñ Pleylist", callback_data="playlist"),
                    InlineKeyboardButton("Menu ‚èØ ", callback_data="menu"),
                ],
                [
                    InlineKeyboardButton(text="üé¨ YouTube", url=f"{url}"),
                    InlineKeyboardButton(text="Y√ºkl…ô üì•", url=f"{dlurl}"),
                ],
                [
                    InlineKeyboardButton(text="‚ùå Baƒüla", callback_data="cls")
                ],
            ]
        )
        requested_by = message.from_user.first_name
        await generate_cover(requested_by, title, views, duration, thumbnail)
        file_path = await convert(youtube.download(url))        
    else:
        query = ""
        for i in message.command[1:]:
            query += " " + str(i)
        print(query)
        await lel.edit("üéµ **ƒ∞≈ül…ônilir**")
        ydl_opts = {"format": "bestaudio/best"}
        
        try:
          results = YoutubeSearch(query, max_results=5).to_dict()
        except:
          await lel.edit("M…ôn…ô s…ôsl…ôndirm…ôk √º√ß√ºn bir mahnƒ± ver")
        # Looks like hell. Aren't it?? FUCK OFF
        try:
            toxxt = "**S…ôsl…ôndirm…ôk ist…ôdiyiniz mahnƒ±nƒ± se√ßin ‚úÖ**\n\n"
            j = 0
            useer=user_name
            emojilist = ["1Ô∏è‚É£","2Ô∏è‚É£","3Ô∏è‚É£","4Ô∏è‚É£","5Ô∏è‚É£",]

            while j < 5:
                toxxt += f"{emojilist[j]} **Ba≈ülƒ±q - [{results[j]['title']}](https://youtube.com{results[j]['url_suffix']})**\n"
                toxxt += f" ‚ïö **M√ºdd…ôt** - {results[j]['duration']}\n"
                toxxt += f" ‚ïö **ƒ∞zl…ônm…ô** - {results[j]['views']}\n"
                j += 1            
            koyboard = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton("1Ô∏è‚É£", callback_data=f'plll 0|{query}|{user_id}'),
                        InlineKeyboardButton("2Ô∏è‚É£", callback_data=f'plll 1|{query}|{user_id}'),
                        InlineKeyboardButton("3Ô∏è‚É£", callback_data=f'plll 2|{query}|{user_id}'),
                    ],
                    [
                        InlineKeyboardButton("4Ô∏è‚É£", callback_data=f'plll 3|{query}|{user_id}'),
                        InlineKeyboardButton("5Ô∏è‚É£", callback_data=f'plll 4|{query}|{user_id}'),
                    ],
                    [
                        InlineKeyboardButton(text="‚ùå Baƒüla", callback_data="cls")
                    ],
                ]
            )       
            await lel.edit(toxxt,reply_markup=koyboard,disable_web_page_preview=True)
            return
        except:
            await lel.edit("Se√ßm…ôk √º√ß√ºn kifay…ôt q…ôd…ôr n…ôtic…ô yoxdur... ")
                        
            # print(results)
            try:
                url = f"https://youtube.com{results[0]['url_suffix']}"
                title = results[0]["title"][:40]
                thumbnail = results[0]["thumbnails"][0]
                thumb_name = f"thumb{title}.jpg"
                thumb = requests.get(thumbnail, allow_redirects=True)
                open(thumb_name, "wb").write(thumb.content)
                duration = results[0]["duration"]
                results[0]["url_suffix"]
                views = results[0]["views"]

            except Exception as e:
                await lel.edit(
                    "Mahnƒ± tapƒ±lmadƒ±. Ba≈üqa bir mahnƒ±nƒ± sƒ±nayƒ±n v…ô ya d√ºzg√ºn yazƒ±n."
                )
                print(str(e))
                return
            dlurl=url
            dlurl=dlurl.replace("youtube","youtubepp")
            keyboard = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton("üìñ Pleylist", callback_data="playlist"),
                        InlineKeyboardButton("Menu ‚èØ ", callback_data="menu"),
                    ],
                    [
                        InlineKeyboardButton(text="üé¨ YouTube", url=f"{url}"),
                        InlineKeyboardButton(text="Y√ºkl…ô üì•", url=f"{dlurl}"),
                    ],
                    [
                        InlineKeyboardButton(text="‚ùå Baƒüla", callback_data="cls")
                    ],
                ]
            )
            requested_by = message.from_user.first_name
            await generate_cover(requested_by, title, views, duration, thumbnail)
            file_path = await convert(youtube.download(url))   
    chat_id = get_chat_id(message.chat)
    if chat_id in callsmusic.pytgcalls.active_calls:
        position = await queues.put(chat_id, file=file_path)
        qeue = que.get(chat_id)
        s_name = title
        r_by = message.from_user
        loc = file_path
        appendable = [s_name, r_by, loc]
        qeue.append(appendable)
        await message.reply_photo(
            photo="final.png",
            caption=f"#‚É£ T…ôl…ôb olunan mahnƒ± {position} sƒ±raya …ôlav…ô oldunu!",
            reply_markup=keyboard,
        )
        os.remove("final.png")
        return await lel.delete()
    else:
        chat_id = get_chat_id(message.chat)
        que[chat_id] = []
        qeue = que.get(chat_id)
        s_name = title
        r_by = message.from_user
        loc = file_path
        appendable = [s_name, r_by, loc]
        qeue.append(appendable)
        try:
            await callsmusic.pytgcalls.join_group_call(chat_id, file_path)
        except:
            message.reply("S…ôsli S√∂hb…ôt aktƒ±f deyil v…ô ya qo≈üula bilmir…ôm")
            return
        await message.reply_photo(
            photo="final.png",
            reply_markup=keyboard,
            caption="‚ñ∂Ô∏è **{}** T…ôr…ôfind…ôn ist…ônil…ôn musiqi burada YouTube Music vasit…ôsil…ô oxunur.".format(
                message.from_user.mention()
            ),
        )
        os.remove("final.png")
        return await lel.delete()


@Client.on_message(filters.command("ytplay") & filters.group & ~filters.edited)
@authorized_users_only
async def ytplay(_, message: Message):
    global que
    if message.chat.id in DISABLED_GROUPS:
        return
    lel = await message.reply("üîÑ **Hazƒ±rlanƒ±r**")
    administrators = await get_administrators(message.chat)
    chid = message.chat.id

    try:
        user = await USER.get_me()
    except:
        user.first_name = "helper"
    usar = user
    wew = usar.id
    try:
        # chatdetails = await USER.get_chat(chid)
        await _.get_chat_member(chid, wew)
    except:
        for administrator in administrators:
            if administrator == message.from_user.id:
                if message.chat.title.startswith("Channel Music: "):
                    await lel.edit(
                        "<b>Kanalƒ±nƒ±za asistanƒ± …ôlav…ô etm…ôyi unutmayƒ±n</b>",
                    )
                    pass
                try:
                    invitelink = await _.export_chat_invite_link(chid)
                except:
                    await lel.edit(
                        "<b>∆èvv…ôlc…ô m…ôni qrupunuza admin olaraq …ôlav…ô edin</b>",
                    )
                    return

                try:
                    await USER.join_chat(invitelink)
                    await USER.send_message(
                        message.chat.id, "S…ôsli S√∂hb…ôtd…ô musiqi s…ôsl…ôndirm…ôk √º√ß√ºn bu qrupa qo≈üuldum"
                    )
                    await lel.edit(
                        "<b>K√∂m…ôk√ßi asistan s√∂hb…ôtiniz…ô qo≈üuldu</b>",
                    )

                except UserAlreadyParticipant:
                    pass
                except Exception:
                    # print(e)
                    await lel.edit(
                        f"<b>‚õîÔ∏è Flood X…ôtasƒ± ‚õîÔ∏è \n{user.first_name} √ßox saylƒ± ist…ôkl…ôr √ºz…ôrin…ô qrupunuza qo≈üula bilm…ôdi. Asistan {user.first_name} qrupda qadaƒüan edilm…ôdiyin…ô …ômin olun."
                        "\n\nV…ô ya …ôl il…ô qrupunuza Asistan …ôlav…ô edin v…ô yenid…ôn c…ôhd edin</b>",
                    )
    try:
        await USER.get_chat(chid)
        # lmoa = await client.get_chat_member(chid,wew)
    except:
        await lel.edit(
            f"<i> {user.first_name} Bu grupda yoxdu!\nAdmin hey…ôtind…ôn 1 n…ôf…ôr mahnƒ± qo≈ümazdan …ôvv…ôl /play …ômrini bo≈ü olaraq istifad…ô edin\n{user.first_name} Bu halda da grupa qatƒ±lmazsa Onu …ôl il…ô …ôlav…ô edin v…ô ya d…ôst…ôk grupuna bildirin</i>\nD…ôst…ôk grupu: @GroupMuzikSup</i>"
        )
        return
    await lel.edit("üîé **Axtarƒ±ram**")
    user_id = message.from_user.id
    user_name = message.from_user.first_name
     

    query = ""
    for i in message.command[1:]:
        query += " " + str(i)
    print(query)
    await lel.edit("üéµ **ƒ∞≈ül…ônilir**")
    ydl_opts = {"format": "bestaudio/best"}
    try:
        results = YoutubeSearch(query, max_results=1).to_dict()
        url = f"https://youtube.com{results[0]['url_suffix']}"
        # print(results)
        title = results[0]["title"][:40]
        thumbnail = results[0]["thumbnails"][0]
        thumb_name = f"thumb{title}.jpg"
        thumb = requests.get(thumbnail, allow_redirects=True)
        open(thumb_name, "wb").write(thumb.content)
        duration = results[0]["duration"]
        results[0]["url_suffix"]
        views = results[0]["views"]

    except Exception as e:
        await lel.edit(
            "Mahnƒ± tapƒ±lmadƒ±. Ba≈üqa bir mahnƒ±nƒ± sƒ±nayƒ±n v…ô ya d√ºzg√ºn yazƒ±n."
        )
        print(str(e))
        return
    dlurl=url
    dlurl=dlurl.replace("youtube","youtubepp")
    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("üìñ Pleylist", callback_data="playlist"),
                InlineKeyboardButton("Menu ‚èØ ", callback_data="menu"),
            ],
            [
                InlineKeyboardButton(text="üé¨ YouTube", url=f"{url}"),
                InlineKeyboardButton(text="Y√ºkl…ô üì•", url=f"{dlurl}"),
            ],
            [
                InlineKeyboardButton(text="‚ùå Baƒüla", callback_data="cls")
            ],
        ]
    )
    requested_by = message.from_user.first_name
    await generate_cover(requested_by, title, views, duration, thumbnail)
    file_path = await convert(youtube.download(url))
    chat_id = get_chat_id(message.chat)
    if chat_id in callsmusic.pytgcalls.active_calls:
        position = await queues.put(chat_id, file=file_path)
        qeue = que.get(chat_id)
        s_name = title
        r_by = message.from_user
        loc = file_path
        appendable = [s_name, r_by, loc]
        qeue.append(appendable)
        await message.reply_photo(
            photo="final.png",
            caption=f"#‚É£ T…ôl…ôb olunan mahnƒ± {position} sƒ±raya …ôlav…ô oldunu!",
            reply_markup=keyboard,
        )
        os.remove("final.png")
        return await lel.delete()
    else:
        chat_id = get_chat_id(message.chat)
        que[chat_id] = []
        qeue = que.get(chat_id)
        s_name = title
        r_by = message.from_user
        loc = file_path
        appendable = [s_name, r_by, loc]
        qeue.append(appendable)
        try:
            await callsmusic.pytgcalls.join_group_call(chat_id, file_path)
        except:
            message.reply("S…ôsli S√∂hb…ôt aktif deyil v…ô ya ona qo≈üula bilmir…ôm")
            return
        await message.reply_photo(
            photo="final.png",
            reply_markup=keyboard,
            caption="‚ñ∂Ô∏è **{}** T…ôr…ôfind…ôn ist…ônil…ôn musiqi burada YouTube Music vasit…ôsil…ô oxunur.".format(
                message.from_user.mention()
            ),
        )
        os.remove("final.png")
        return await lel.delete()
    

@Client.on_message(filters.command("splay") & filters.group & ~filters.edited)
async def jiosaavn(client: Client, message_: Message):
    global que
    if message_.chat.id in DISABLED_GROUPS:
        return    
    lel = await message_.reply("üîÑ **Hazƒ±rlanƒ±r**")
    administrators = await get_administrators(message_.chat)
    chid = message_.chat.id
    try:
        user = await USER.get_me()
    except:
        user.first_name = "GroupMuzikBot"
    usar = user
    wew = usar.id
    try:
        # chatdetails = await USER.get_chat(chid)
        await client.get_chat_member(chid, wew)
    except:
        for administrator in administrators:
            if administrator == message_.from_user.id:
                if message_.chat.title.startswith("Channel Music: "):
                    await lel.edit(
                        "<b>Kanalƒ±nƒ±za assistanƒ± …ôlav…ô etm…ôyi unutmayƒ±n</b>",
                    )
                    pass
                try:
                    invitelink = await client.export_chat_invite_link(chid)
                except:
                    await lel.edit(
                        "<b>∆èvv…ôlc…ô m…ôni qrupunuza admin olaraq …ôlav…ô edin</b>",
                    )
                    return

                try:
                    await USER.join_chat(invitelink)
                    await USER.send_message(
                        message_.chat.id, "S…ôsli S√∂hb…ôtd…ô d…ô musiqi s…ôsl…ôndirm…ôk √º√ß√ºn bu qrupa qo≈üuldum"
                    )
                    await lel.edit(
                        "<b>K√∂m…ôk√ßi Asistan s√∂hb…ôtiniz…ô qo≈üuldu</b>",
                    )

                except UserAlreadyParticipant:
                    pass
                except Exception:
                    # print(e)
                    await lel.edit(
                        f"<b>‚õîÔ∏è Flood X…ôtasƒ± ‚õîÔ∏è \n{user.first_name} √ßox saylƒ± ist…ôkl…ôr √ºz…ôrin…ô qrupunuza qo≈üula bilm…ôdi. Asistan {user.first_name} qrupda qadaƒüan edilm…ôdiyin…ô …ômin olun."
                        "\n\nV…ô ya …ôl il…ô qrupunuza Asistan …ôlav…ô edin v…ô yenid…ôn c…ôhd edin</b>"
                    )
    try:
        await USER.get_chat(chid)
        # lmoa = await client.get_chat_member(chid,wew)
    except:
        await lel.edit(
            "<i> Bu grupda yoxdu!\nAdmin hey…ôtind…ôn 1 n…ôf…ôr mahnƒ± qo≈ümazdan …ôvv…ôl /play …ômrini bo≈ü olaraq istifad…ô edin\n{user.first_name} Bu halda da grupa qatƒ±lmazsa Onu …ôl il…ô …ôlav…ô edin v…ô ya d…ôst…ôk grupuna bildirin</i>\nD…ôst…ôk grupu: @GroupMuzikSup</i>"
        )
        return
    requested_by = message_.from_user.first_name
    chat_id = message_.chat.id
    text = message_.text.split(" ", 1)
    query = text[1]
    res = lel  
    await res.edit(f"üîç `{query}` v…ô jio saavn √ºz…ôrind…ô Axtarƒ±ram")
    
    # ================== Copied from https://github.com/TheHamkerCat/WilliamButcherBot/blob/dev/wbb/modules/music.py line 170 ===============
    
    """
    MIT License
    Copyright (c) 2021 TheHamkerCat
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
    """    
    try:
        songs = await arq.saavn(query)
        if not songs.ok:
            await message_.reply_text(songs.result)
            return
        sname = songs.result[0].song
        slink = songs.result[0].media_url
        ssingers = songs.result[0].singers
        sthumb = songs.result[0].image
        sduration = int(songs.result[0].duration)

# ================================================================================================================================================


    except Exception as e:
        await res.edit(" He√ß n…ô tapƒ±lmadƒ±.")
        print(str(e))
        return
    try:    
        duuration= round(sduration / 60)
        if duuration > DURATION_LIMIT:
            await cb.message.edit(f"{DURATION_LIMIT} d…ôqiq…ôd…ôn uzun musiqi √ßalmaƒüa icaz…ô verilmir")
            return
    except:
        pass    
    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("üìñ Pleylist", callback_data="playlist"),
                InlineKeyboardButton("Menu ‚èØ ", callback_data="menu"),
            ],
            [
                InlineKeyboardButton(text="R…ôsmi Kanala Qo≈üulun", url=f"https://t.me/{updateschannel}")
            ],
            [
                InlineKeyboardButton(text="‚ùå Baƒüla", callback_data="cls")
            ],
        ]
    )
    file_path = await convert(wget.download(slink))
    chat_id = get_chat_id(message_.chat)
    if chat_id in callsmusic.pytgcalls.active_calls:
        position = await queues.put(chat_id, file=file_path)
        qeue = que.get(chat_id)
        s_name = sname
        r_by = message_.from_user
        loc = file_path
        appendable = [s_name, r_by, loc]
        qeue.append(appendable)
        await res.delete()
        m = await client.send_photo(
            chat_id=message_.chat.id,
            reply_markup=keyboard,
            photo="final.png",
            caption=f"‚úØ{bn}‚úØ=#Ô∏è‚É£  T…ôl…ôb olunan mahnƒ± {position} sƒ±raya …ôlav…ô oldunu!",
        )

    else:
        await res.edit_text(f"{bn}=‚ñ∂Ô∏è S…ôsl…ôndirilir.....")
        que[chat_id] = []
        qeue = que.get(chat_id)
        s_name = sname
        r_by = message_.from_user
        loc = file_path
        appendable = [s_name, r_by, loc]
        qeue.append(appendable)
        try:
            await callsmusic.pytgcalls.join_group_call(chat_id, file_path)
        except:
            res.edit("Qrup z…ôngi aktif deyil, ona qo≈üula bilmir…ôm")
            return
    await res.edit("Ki√ßik ≈ü…ôkil yaradƒ±ldƒ±.")
    await generate_cover(requested_by, sname, ssingers, sduration, sthumb)
    await res.delete()
    m = await client.send_photo(
        chat_id=message_.chat.id,
        reply_markup=keyboard,
        photo="final.png",
        caption=f"{sname} Via Jiosaavn T…ôr…ôfind…ôn S…ôsl…ôndirilir",
    )
    os.remove("final.png")


@Client.on_callback_query(filters.regex(pattern=r"plll"))
async def lol_cb(b, cb):
    global que

    cbd = cb.data.strip()
    chat_id = cb.message.chat.id
    typed_=cbd.split(None, 1)[1]
    #useer_id = cb.message.reply_to_message.from_user.id
    try:
        x,query,useer_id = typed_.split("|")      
    except:
        await cb.message.edit("Mahnƒ± tapƒ±lmadƒ±")
        return
    useer_id = int(useer_id)
    if cb.from_user.id != useer_id:
        await cb.answer("Mahnƒ±nƒ± s…ôsl…ôndirm…ôk etm…ôk ist…ôy…ôn s…ôn deyils…ôn!", show_alert=True)
        return
    await cb.message.edit("G√∂zl…ôyin. S…ôsl…ôndirm…ôy…ô Ba≈ülayƒ±")
    x=int(x)
    try:
        useer_name = cb.message.reply_to_message.from_user.first_name
    except:
        useer_name = cb.message.from_user.first_name
    
    results = YoutubeSearch(query, max_results=5).to_dict()
    resultss=results[x]["url_suffix"]
    title=results[x]["title"][:40]
    thumbnail=results[x]["thumbnails"][0]
    duration=results[x]["duration"]
    views=results[x]["views"]
    url = f"https://youtube.com{resultss}"
    
    try:    
        duuration= round(duration / 60)
        if duuration > DURATION_LIMIT:
            await cb.message.edit(f"{DURATION_LIMIT} d…ôqiq…ôd…ôn uzun musiqi s…ôsl…ôndirm…ôy…ô icaz…ô verilmir")
            return
    except:
        pass
    try:
        thumb_name = f"thumb{title}.jpg"
        thumb = requests.get(thumbnail, allow_redirects=True)
        open(thumb_name, "wb").write(thumb.content)
    except Exception as e:
        print(e)
        return
    dlurl=url
    dlurl=dlurl.replace("youtube","youtubepp")
    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("üìñ Pleylist", callback_data="playlist"),
                InlineKeyboardButton("Menu ‚èØ ", callback_data="menu"),
            ],
            [
                InlineKeyboardButton(text="üé¨ YouTube", url=f"{url}"),
                InlineKeyboardButton(text="Y√ºkl…ô üì•", url=f"{dlurl}"),
            ],
            [
                InlineKeyboardButton(text="‚ùå Baƒüla", callback_data="cls")
            ],
        ]
    )
    requested_by = useer_name
    await generate_cover(requested_by, title, views, duration, thumbnail)
    file_path = await convert(youtube.download(url))  
    if chat_id in callsmusic.pytgcalls.active_calls:
        position = await queues.put(chat_id, file=file_path)
        qeue = que.get(chat_id)
        s_name = title
        try:
            r_by = cb.message.reply_to_message.from_user
        except:
            r_by = cb.message.from_user
        loc = file_path
        appendable = [s_name, r_by, loc]
        qeue.append(appendable)
        await cb.message.delete()
        await b.send_photo(chat_id,
            photo="final.png",
            caption=f"#‚É£  T…ôl…ôb olunan mahnƒ± {position} sƒ±raya …ôlav…ô oldunu!",
            reply_markup=keyboard,
        )
        os.remove("final.png")
        
    else:
        que[chat_id] = []
        qeue = que.get(chat_id)
        s_name = title
        try:
            r_by = cb.message.reply_to_message.from_user
        except:
            r_by = cb.message.from_user
        loc = file_path
        appendable = [s_name, r_by, loc]
        qeue.append(appendable)

        await callsmusic.pytgcalls.join_group_call(chat_id, file_path)
        await cb.message.delete()
        await b.send_photo(chat_id,
            photo="final.png",
            reply_markup=keyboard,
            caption=f"‚ñ∂Ô∏è **{r_by.mention}** T…ôr…ôfind…ôn ist…ônil…ôn musiqi burada YouTube Music vasit…ôsil…ô oxunur. ",
        )
        os.remove("final.png")
